from itertools import combinations
import numpy as np
import os 


def csv_to_dict(s):
    d = {}
    for line in s.split('\n'):
        if line != '':
            im, cl = line.split(',')
            try: 
                d[cl] += [im]
            except KeyError:
                d[cl] = []
                d[cl] += [im]
    return d


def assert_disjoint_splits(d): 
    for i, j in combinations(d.keys(), 2):
        assert set(d[i]).isdisjoint(d[j])


# ILSVRC IDs
ilsvrc_synsets = ['n15075141', 'n04310018', 'n02088466', 'n03218198', 'n02107574', 'n02364673', 'n03657121', 'n02259212', 'n03388183', 'n02950826', 'n02104365', 'n03785016', 'n09835506', 'n03649909', 'n04509417', 'n02417914', 'n03786901', 'n02790996', 'n07747607', 'n01734418', 'n02325366', 'n01443537', 'n04447861', 'n02444819', 'n02089973', 'n02018207', 'n02909870', 'n02177972', 'n02017213', 'n03692522', 'n02486410', 'n03062245', 'n04086273', 'n03721384', 'n02085620', 'n02690373', 'n02264363', 'n03042490', 'n02117135', 'n02894605', 'n04238763', 'n03793489', 'n02101006', 'n07717556', 'n02114712', 'n04277352', 'n02971356', 'n02091244', 'n02412080', 'n01751748', 'n02100236', 'n02783161', 'n03788195', 'n04251144', 'n04118538', 'n01914609', 'n01644373', 'n04357314', 'n02268443', 'n02112706', 'n03400231', 'n03259280', 'n03100240', 'n07714990', 'n02125311', 'n01990800', 'n03690938', 'n01558993', 'n02087046', 'n03637318', 'n03125729', 'n03325584', 'n03980874', 'n03776460', 'n03461385', 'n01665541', 'n03794056', 'n07714571', 'n04371430', 'n07716906', 'n03763968', 'n03998194', 'n01784675', 'n11879895', 'n04037443', 'n02028035', 'n09288635', 'n03297495', 'n02879718', 'n02077923', 'n02123045', 'n02361337', 'n02018795', 'n01728572', 'n04599235', 'n04039381', 'n02089078', 'n02088238', 'n03717622', 'n04548362', 'n03995372', 'n03733805', 'n02948072', 'n04532670', 'n02112137', 'n02088094', 'n02219486', 'n03584254', 'n03814906', 'n10565667', 'n02123394', 'n04239074', 'n04243546', 'n02087394', 'n02892201', 'n02992211', 'n01614925', 'n02906734', 'n02106166', 'n02802426', 'n04141076', 'n04019541', 'n03590841', 'n13037406', 'n02113023', 'n07715103', 'n04479046', 'n02804414', 'n07760859', 'n03032252', 'n02106662', 'n04462240', 'n04482393', 'n02415577', 'n03709823', 'n03840681', 'n02442845', 'n03494278', 'n01955084', 'n04399382', 'n03065424', 'n03201208', 'n04429376', 'n02108000', 'n03792972', 'n02102177', 'n01560419', 'n04458633', 'n03661043', 'n03089624', 'n02012849', 'n02110958', 'n04557648', 'n02128757', 'n01682714', 'n02113186', 'n02099429', 'n01833805', 'n09472597', 'n01872401', 'n02002556', 'n02669723', 'n02093754', 'n02321529', 'n07613480', 'n02090721', 'n02825657', 'n03992509', 'n02110185', 'n04552348', 'n07745940', 'n04435653', 'n04550184', 'n09193705', 'n09246464', 'n03345487', 'n01817953', 'n03188531', 'n01697457', 'n03388043', 'n03871628', 'n04235860', 'n03876231', 'n02769748', 'n13052670', 'n02391049', 'n01855032', 'n02091032', 'n02492660', 'n07697537', 'n04152593', 'n02165456', 'n02165105', 'n03929660', 'n02114855', 'n03355925', 'n13133613', 'n04591713', 'n03938244', 'n02096177', 'n01616318', 'n02233338', 'n03452741', 'n01537544', 'n03838899', 'n02086910', 'n03529860', 'n03759954', 'n02979186', 'n03492542', 'n01824575', 'n02692877', 'n03937543', 'n07802026', 'n03584829', 'n02877765', 'n02488291', 'n01632777', 'n02277742', 'n03141823', 'n01675722', 'n02105412', 'n02939185', 'n03393912', 'n01744401', 'n02109047', 'n02123159', 'n02489166', 'n02814533', 'n04589890', 'n03075370', 'n07836838', 'n03895866', 'n03769881', 'n01534433', 'n04209239', 'n02112018', 'n02102318', 'n03110669', 'n03017168', 'n02655020', 'n03337140', 'n07565083', 'n01950731', 'n07930864', 'n02097130', 'n03916031', 'n02834397', 'n03930630', 'n09421951', 'n03180011', 'n03825788', 'n02025239', 'n03777754', 'n02484975', 'n01924916', 'n01756291', 'n02794156', 'n04275548', 'n04591157', 'n04325704', 'n02105505', 'n04270147', 'n04409515', 'n02107312', 'n02097209', 'n03134739', 'n01776313', 'n02093428', 'n03424325', 'n02488702', 'n04493381', 'n03710721', 'n03290653', 'n03933933', 'n02797295', 'n03187595', 'n01532829', 'n02268853', 'n02342885', 'n03954731', 'n03602883', 'n07248320', 'n04044716', 'n06785654', 'n01667114', 'n03483316', 'n07695742', 'n02102480', 'n02500267', 'n03220513', 'n03384352', 'n04517823', 'n03598930', 'n04179913', 'n03944341', 'n02093991', 'n02978881', 'n03223299', 'n02871525', 'n01739381', 'n04515003', 'n01768244', 'n03347037', 'n04613696', 'n04009552', 'n02119022', 'n02279972', 'n04136333', 'n02395406', 'n04067472', 'n02129165', 'n04597913', 'n03599486', 'n02445715', 'n04372370', 'n01695060', 'n02808440', 'n02110806', 'n04090263', 'n02114548', 'n02091635', 'n02423022', 'n03291819', 'n02093859', 'n01773797', 'n02102973', 'n04380533', 'n12985857', 'n01883070', 'n03495258', 'n03796401', 'n03457902', 'n04476259', 'n13040303', 'n02641379', 'n02727426', 'n02843684', 'n02280649', 'n03014705', 'n03706229', 'n04336792', 'n02190166', 'n02123597', 'n04326547', 'n02007558', 'n02104029', 'n01820546', 'n04536866', 'n02281406', 'n04483307', 'n04049303', 'n07753113', 'n02317335', 'n01877812', 'n09256479', 'n04252225', 'n03764736', 'n02607072', 'n01981276', 'n04204347', 'n02113624', 'n02174001', 'n03804744', 'n02787622', 'n03026506', 'n02992529', 'n07768694', 'n02056570', 'n02088632', 'n06359193', 'n02110627', 'n02058221', 'n07693725', 'n07754684', 'n03642806', 'n03388549', 'n03976467', 'n04355338', 'n03770679', 'n04154565', 'n03884397', 'n04074963', 'n03791053', 'n04335435', 'n01484850', 'n04146614', 'n01494475', 'n07614500', 'n03481172', 'n07584110', 'n02859443', 'n01945685', 'n02105056', 'n03929855', 'n04147183', 'n02119789', 'n02027492', 'n04525305', 'n02514041', 'n03394916', 'n03447447', 'n02037110', 'n04263257', 'n02134418', 'n01498041', 'n01944390', 'n04285008', 'n02074367', 'n02091134', 'n07880968', 'n04347754', 'n03903868', 'n02105855', 'n03127747', 'n02493509', 'n02443484', 'n02747177', 'n04133789', 'n03467068', 'n01806143', 'n01592084', 'n02799071', 'n02099601', 'n02999410', 'n01692333', 'n02437616', 'n02089867', 'n03888605', 'n03874599', 'n02097298', 'n01631663', 'n04266014', 'n03544143', 'n02099267', 'n03045698', 'n09229709', 'n03124043', 'n02101388', 'n02815834', 'n03891332', 'n04418357', 'n02643566', 'n03124170', 'n02804610', 'n02109525', 'n02480855', 'n02346627', 'n04560804', 'n03344393', 'n12144580', 'n04579432', 'n04228054', 'n02281787', 'n01729322', 'n01755581', 'n03594945', 'n02120505', 'n02883205', 'n02328150', 'n02088364', 'n03967562', 'n02097047', 'n02091831', 'n02974003', 'n02085936', 'n01847000', 'n03958227', 'n01806567', 'n04461696', 'n03018349', 'n02494079', 'n01980166', 'n02437312', 'n02490219', 'n03445924', 'n03873416', 'n01798484', 'n04209133', 'n09428293', 'n03888257', 'n04264628', 'n01985128', 'n03133878', 'n02492035', 'n03935335', 'n04592741', 'n02110063', 'n01753488', 'n02138441', 'n02666196', 'n01693334', 'n04606251', 'n03250847', 'n03720891', 'n03658185', 'n02006656', 'n07583066', 'n02100583', 'n02236044', 'n02133161', 'n03877472', 'n03404251', 'n12267677', 'n03016953', 'n01819313', 'n02094433', 'n01689811', 'n02396427', 'n04525038', 'n02397096', 'n01797886', 'n03976657', 'n02483362', 'n02106382', 'n03095699', 'n02276258', 'n01440764', 'n02730930', 'n03207743', 'n01795545', 'n02108551', 'n01855672', 'n03733281', 'n07720875', 'n03697007', 'n03478589', 'n03496892', 'n03814639', 'n02640242', 'n03908618', 'n01871265', 'n07697313', 'n01774750', 'n03482405', 'n02127052', 'n03196217', 'n04442312', 'n03857828', 'n09468604', 'n01728920', 'n04465501', 'n01629819', 'n01491361', 'n06596364', 'n03970156', 'n01582220', 'n04370456', 'n01986214', 'n07753275', 'n02422106', 'n03179701', 'n04116512', 'n04099969', 'n03594734', 'n04041544', 'n02930766', 'n01978455', 'n07730033', 'n03633091', 'n03868242', 'n02422699', 'n02085782', 'n04141327', 'n03459775', 'n04344873', 'n03527444', 'n02086240', 'n02497673', 'n03710193', 'n01748264', 'n02965783', 'n03775546', 'n04376876', 'n02092339', 'n03742115', 'n02483708', 'n04505470', 'n02137549', 'n04311004', 'n04118776', 'n07716358', 'n03724870', 'n01687978', 'n02091467', 'n03530642', 'n01943899', 'n04532106', 'n04033995', 'n01984695', 'n04356056', 'n02980441', 'n02536864', 'n04486054', 'n02113799', 'n03761084', 'n03146219', 'n04553703', 'n01531178', 'n02071294', 'n01664065', 'n04389033', 'n04355933', 'n13054560', 'n02363005', 'n03372029', 'n07831146', 'n02115913', 'n03444034', 'n04604644', 'n04485082', 'n07753592', 'n03961711', 'n02504458', 'n04065272', 'n01930112', 'n03977966', 'n02013706', 'n02870880', 'n03775071', 'n02033041', 'n03843555', 'n02095889', 'n02100735', 'n02097474', 'n04254120', 'n01796340', 'n01843065', 'n04070727', 'n03532672', 'n02111889', 'n03854065', 'n03733131', 'n03991062', 'n04456115', 'n01770393', 'n04423845', 'n01818515', 'n03777568', 'n01749939', 'n04201297', 'n01773549', 'n04428191', 'n03272562', 'n02111500', 'n02114367', 'n04596742', 'n04254680', 'n04350905', 'n02124075', 'n02256656', 'n02443114', 'n03443371', 'n03000684', 'n03924679', 'n07684084', 'n04069434', 'n03271574', 'n01632458', 'n02128385', 'n02105162', 'n02951358', 'n04554684', 'n02510455', 'n02988304', 'n02096051', 'n04328186', 'n04443257', 'n03041632', 'n04229816', 'n02808304', 'n02226429', 'n02096585', 'n01729977', 'n02814860', 'n02105251', 'n02977058', 'n04562935', 'n04125021', 'n03666591', 'n02841315', 'n03450230', 'n04127249', 'n03240683', 'n07749582', 'n01688243', 'n06794110', 'n02116738', 'n04008634', 'n01704323', 'n04040759', 'n03782006', 'n03837869', 'n01968897', 'n04371774', 'n02107142', 'n02667093', 'n02319095', 'n02487347', 'n02486261', 'n02356798', 'n04033901', 'n02788148', 'n03255030', 'n02002724', 'n02130308', 'n04579145', 'n04501370', 'n03662601', 'n02093256', 'n04523525', 'n03841143', 'n03887697', 'n04200800', 'n06874185', 'n01775062', 'n03249569', 'n12057211', 'n03670208', 'n01770081', 'n02786058', 'n02927161', 'n07718747', 'n12768682', 'n02113712', 'n03216828', 'n03208938', 'n07873807', 'n02099712', 'n01917289', 'n02111277', 'n02096294', 'n03866082', 'n07860988', 'n03535780', 'n01910747', 'n04366367', 'n03063599', 'n03956157', 'n02134084', 'n02493793', 'n01641577', 'n04192698', 'n02509815', 'n07932039', 'n03085013', 'n13044778', 'n02132136', 'n03028079', 'n04317175', 'n03877845', 'n03982430', 'n02090379', 'n04111531', 'n02480495', 'n02791124', 'n02094114', 'n03792782', 'n03947888', 'n02106550', 'n01773157', 'n03920288', 'n04330267', 'n02966193', 'n04487081', 'n07742313', 'n04252077', 'n02782093', 'n01496331', 'n02823750', 'n03770439', 'n02892767', 'n02701002', 'n02011460', 'n04120489', 'n04507155', 'n04265275', 'n03803284', 'n02109961', 'n01774384', 'n03000247', 'n02108422', 'n03874293', 'n02457408', 'n01698640', 'n02105641', 'n03743016', 'n04162706', 'n02086646', 'n04026417', 'n03673027', 'n04467665', 'n04023962', 'n04296562', 'n03899768', 'n02107683', 'n01608432', 'n02951585', 'n01667778', 'n02098105', 'n02066245', 'n03425413', 'n04487394', 'n07579787', 'n02108915', 'n02606052', 'n03417042', 'n04131690', 'n01694178', 'n04149813', 'n02097658', 'n03131574', 'n02115641', 'n03538406', 'n04204238', 'n03773504', 'n09332890', 'n02699494', 'n02106030', 'n02093647', 'n02009912', 'n07711569', 'n02111129', 'n04398044', 'n02793495', 'n03272010', 'n03832673', 'n01807496', 'n01580077', 'n02051845', 'n03676483', 'n02098413', 'n02102040', 'n02206856', 'n01829413', 'n02094258', 'n01630670', 'n07920052', 'n02326432', 'n02403003', 'n02840245', 'n03630383', 'n02749479', 'n03485794', 'n02837789', 'n02099849', 'n03868863', 'n02917067', 'n03902125', 'n02526121', 'n03691459', 'n02865351', 'n03891251', 'n02687172', 'n01622779', 'n01860187', 'n02807133', 'n03788365', 'n12998815', 'n07615774', 'n01677366', 'n04311174', 'n04367480', 'n03787032', 'n04004767', 'n02823428', 'n04332243', 'n03000134', 'n01685808', 'n04542943', 'n04153751', 'n02966687', 'n03445777', 'n03476991', 'n03781244', 'n01518878', 'n02672831', 'n07590611', 'n11939491', 'n03617480', 'n02107908', 'n03983396', 'n03476684', 'n02704792', 'n04254777', 'n02108089', 'n02895154', 'n03942813', 'n04259630', 'n04258138', 'n02408429', 'n02835271', 'n07875152', 'n03680355', 'n02817516', 'n04404412', 'n02231487', 'n03950228', 'n01978287', 'n02910353', 'n01514859', 'n02101556', 'n03447721', 'n02981792', 'n02095314', 'n01983481', 'n02169497', 'n02167151', 'n04540053', 'n03207941', 'n04273569', 'n03729826', 'n02447366', 'n03485407', 'n02791270', 'n02504013', 'n02398521', 'n03063689', 'n01669191', 'n02676566', 'n02128925', 'n04081281', 'n02776631', 'n03930313', 'n01882714', 'n02086079', 'n04522168', 'n01843383', 'n02869837', 'n03126707', 'n07871810', 'n02860847', 'n02963159', 'n02092002', 'n01742172', 'n04286575', 'n02110341', 'n01735189', 'n02410509', 'n02441942', 'n09399592', 'n02113978', 'n04548280', 'n01737021', 'n02708093', 'n10148035', 'n07892512', 'n04005630', 'n03710637', 'n02129604', 'n02481823', 'n02172182', 'n02112350', 'n04417672', 'n01530575', 'n02168699', 'n03908714', 'n02098286', 'n03627232', 'n01601694', 'n04208210', 'n03498962', 'n02096437', 'n01514668', 'n03379051', 'n04590129', 'n07717410', 'n03127925', 'n12620546', 'n07718472', 'n01828970', 'n02795169', 'n01740131', 'n03595614', 'n03314780', 'n02454379', 'n04392985', 'n02090622', 'n03109150', 'n02009229', 'n03160309', 'n02120079', 'n02777292', 'n03197337', 'n07734744', 'n02229544', 'n04612504', 'n01644900', 'n03534580', 'n02100877', 'n04584207', 'n04346328', 'n01873310', 'n03376595', 'n02095570', 'n02389026', 'n02916936', 'n03047690', 'n04141975', 'n03623198']


# ImageNet split from "Low-shot Visual Recognition by Shrinking and Hallucinating Features"
# https://arxiv.org/abs/1606.02819
bharath_split = {}

bharath_split['c1base'] = """
n03394916 n02342885 n02782093 n02676566 n03000247 n03062245 n09399592 n02169497
n07615774 n01484850 n01819313 n02102318 n03874293 n02526121 n02835271 n03983396
n07749582 n07584110 n02091244 n04517823 n02749479 n07583066 n01943899 n03344393
n03379051 n03538406 n01698640 n02666196 n03627232 n02486410 n02988304 n03843555
n01693334 n04336792 n03425413 n02783161 n02317335 n02134084 n06874185 n03661043
n02119789 n02206856 n04579145 n02096177 n02114548 n04254777 n04005630 n03924679
n01755581 n03785016 n02977058 n01641577 n04350905 n02012849 n07565083 n03916031
n02391049 n02111500 n02106662 n01632458 n03481172 n02091134 n04192698 n04116512
n07930864 n04509417 n03450230 n01443537 n01632777 n04330267 n01990800 n02096051
n03457902 n02859443 n01687978 n12144580 n01560419 n02509815 n03127747 n01806143
n02910353 n03089624 n04277352 n02097658 n03769881 n03796401 n03444034 n02167151
n04258138 n03763968 n03393912 n01695060 n02410509 n04039381 n03929855 n04456115
n03218198 n01728572 n04325704 n04296562 n01820546 n02930766 n02786058 n03992509
n03908618 n02090379 n02110185 n02096437 n07742313 n02018207 n01614925 n04131690
n07730033 n02091635 n03467068 n07932039 n02364673 n01735189 n04311004 n04264628
n02100877 n01616318 n02510455 n03788195 n03291819 n02114855 n13044778 n03884397
n04118538 n04266014 n03131574 n02769748 n01729977 n01592084 n03476991 n02011460
n04613696 n03014705 n02917067 n07718747 n01742172 n01514859 n04589890 n02791124
n02412080 n03947888 n01981276 n03345487 n04346328 n04423845 n01494475 n03208938
n02112706 n03124170 n02814860 n02099429 n03930630 n02105641 n04065272 n03976657
n02492035 n02966687 n04389033 n07753113 n04548362 n01910747 n04239074 n03792782
n04120489 n03216828 n02992211 n03400231 n01795545 n02107908 n03544143 n02099267
n02951358 n01950731 n02488291 n03085013 n03777754 n03630383 n01873310 n03670208
n02105056 n01883070 n04597913 n04590129 n03706229 n01622779 n02100735 n02939185
n03841143""".split()

bharath_split['c2base'] = """
n01807496 n02916936 n03794056 n01847000 n04044716 n04136333 n11879895 n03534580
n04482393 n03127925 n02264363 n04542943 n01968897 n02871525 n03290653 n04487394
n03950228 n02321529 n01773157 n03271574 n07697313 n03602883 n01582220 n04019541
n02486261 n02009229 n02093754 n01491361 n01756291 n04548280 n02894605 n03201208
n04254680 n03814639 n03495258 n04086273 n03376595 n03527444 n03594734 n03494278
n04099969 n02268443 n07734744 n01806567 n02704792 n04525305 n04560804 n03388549
n03854065 n02690373 n03775071 n03485794 n02086646 n04286575 n02120505 n04485082
n01978455 n04493381 n12768682 n02992529 n02488702 n04153751 n04332243 n01829413
n04200800 n03483316 n09428293 n04591713 n04606251 n04252225 n03016953 n02091831
n02009912 n04209239 n02422699 n02071294 n02966193 n02117135 n02965783 n02123597
n04552348 n01608432 n01945685 n03496892 n03026506 n07747607 n04372370 n04081281
n03384352 n04557648 n03920288 n07860988 n02108551 n07579787 n04553703 n02268853
n02454379 n03532672 n02110806 n02606052 n02408429 n03814906 n02089078 n04310018
n09246464 n02643566 n02825657 n03197337 n03355925 n04591157 n02109525 n02006656
n04162706 n02480495 n04435653 n02808440 n02437616 n02951585 n03297495 n03240683
n02823750 n02091467 n04525038 n12985857 n02423022 n02870880 n02447366 n02236044
n11939491 n02445715 n12057211 n04429376 n02087046 n03045698 n01688243 n07697537
n04540053 n02395406 n03673027 n04584207 n03792972 n02092002 n02865351 n01773797
n02112350 n02120079 n04146614 n01798484 n04252077 n04507155 n02403003 n03134739
n01630670 n04070727 n02361337 n02114367 n03594945 n03976467 n03478589 n03787032
n04285008 n02481823 n02281406 n01914609 n02442845 n02108000 n02077923 n03658185
n04179913 n03417042 n02066245 n07880968 n02776631 n02123045 n02356798 n02999410
n02417914 n02326432 n02640242 n01537544 n02974003 n12267677 n02226429 n02108915
n02088238 n02099601 n02747177 n01665541 n03187595 n03770439 n04428191 n02276258
n07802026 n02794156 n02841315 n02834397""".split()

bharath_split['c1novel'] = """
n10565667 n02978881 n03126707 n07693725 n01818515 n02802426 n03877845 n02094114
n03781244 n03443371 n02256656 n02087394 n02111129 n02074367 n02892767 n03724870
n04204347 n03888257 n01770393 n02107574 n03498962 n07714571 n06785654 n02091032
n02095889 n01770081 n03188531 n02089973 n01924916 n04335435 n01534433 n04090263
n02090622 n13040303 n09835506 n01739381 n02667093 n01740131 n02687172 n03720891
n01530575 n04074963 n01797886 n02799071 n09229709 n03873416 n02097298 n03871628
n03777568 n02883205 n01694178 n03529860 n03995372 n04033995 n02795169 n02980441
n04532670 n01882714 n07768694 n04152593 n02112018 n02607072 n02493793 n02669723
n02492660 n04404412 n04476259 n04033901 n04505470 n01749939 n02948072 n04483307
n04147183 n03697007 n02443484 n03372029 n02804610 n04579432 n03761084 n02086910
n01776313 n02085936 n02398521 n03743016 n01697457 n03868863 n03874599 n02107142
n02115641 n04204238 n04550184 n03929660 n01843065 n03590841 n04366367 n03793489
n02514041 n02692877 n02123159 n04201297 n02396427 n03764736 n02051845 n01704323
n02641379 n01983481 n03666591 n03832673 n03786901 n02088364 n02097474 n07695742
n03930313 n03902125 n02823428 n02089867 n03982430 n04515003 n03272562 n03623198
n04376876 n01532829 n02971356 n13054560 n07613480 n02101006 n03770679 n02095570
n01855672 n03877472 n01986214 n02028035 n07892512 n02096294 n02422106 n02437312
n07745940 n02701002 n07248320 n02843684 n02165456 n02105855 n01980166 n03461385
n03041632 n03956157 n03476684 n02727426 n04259630 n15075141 n13133613 n04254120
n03662601 n03485407 n07715103 n02119022 n01985128 n03075370 n02457408 n04326547
n02093647 n04562935 n04026417 n04125021 n02174001 n02895154 n04270147 n06359193
n07873807 n04501370 n13052670 n02130308 n02277742 n02123394 n03617480 n01817953
n12998815 n04371430 n02168699 n03482405 n02098413 n07717410 n04367480 n02109961
n04275548 n07871810 n02877765 n04409515 n07831146 n02389026 n03250847 n01734418
n02033041 n02415577 n02808304 n04599235 n03866082 n02259212 n02927161 n04522168
n02397096 n03788365 n01833805 n02115913 n03888605 n01784675 n04479046 n04235860
n13037406 n02909870 n01685808 n03452741 n03445924 n01872401 n04208210 n02814533
n02113624 n01675722 n03933933 n03998194 n03447447 n02113799 n04604644 n02107312
n01580077 n02708093 n03937543 n02112137 n02124075 n02489166 n02125311 n04141975
n02027492 n03970156 n02104365 n02100236 n04486054 n04243546 n02137549 n02443114
n02002556 n04141076 n02100583 n03776460 n02804414 n01860187 n01773549 n03692522
n03347037 n03259280 n02085782 n02655020 n02815834 n04417672 n02093428 n03691459
n02177972 n02791270 n02097047 n03991062 n04069434 n04418357 n04467665 n04111531
n02979186 n04465501 n01751748 n03584829 n02319095 n03404251 n03124043 n04392985
n03141823 n03967562 n03903868 n01558993 n02090721 n02106030 n07711569 n04049303
n06596364 n04317175 n02363005 n04443257 n03759954 n02113978 n02504013 n03220513
n03032252 n03954731 n03000684 n02106550 n04532106 n03733281 n02500267 n02086240
n04023962 n01737021 n02441942 n04462240""".split()

bharath_split['c2novel'] = """
n03710193 n02105412 n07753275 n03908714 n03535780 n09468604 n02113023 n01677366
n02536864 n01728920 n02483362 n02128757 n04154565 n04344873 n09256479 n07720875
n03196217 n07875152 n01871265 n01796340 n04265275 n03961711 n01496331 n03272010
n03388043 n02102480 n02837789 n03721384 n03710637 n02097209 n02109047 n02095314
n03717622 n01601694 n02056570 n02480855 n03207941 n04149813 n02233338 n02101556
n03388183 n02058221 n03742115 n04118776 n02879718 n02102177 n03637318 n03179701
n02328150 n04612504 n02099712 n02504458 n03729826 n03042490 n04209133 n04251144
n04356056 n03249569 n04037443 n01644373 n03314780 n02487347 n02699494 n03837869
n03125729 n02950826 n03733131 n03887697 n03942813 n03095699 n02807133 n04228054
n02088632 n02280649 n02114712 n03000134 n02110341 n01824575 n04040759 n07717556
n04523525 n01774750 n03599486 n01682714 n04041544 n07760859 n02279972 n02002724
n01955084 n02007558 n01748264 n03935335 n02096585 n03838899 n02281787 n02086079
n04554684 n04229816 n03649909 n03110669 n04447861 n03804744 n02107683 n02025239
n02094433 n03676483 n01855032 n02037110 n09421951 n02093991 n04328186 n03899768
n02493509 n01768244 n03633091 n02116738 n03657121 n03895866 n01978287 n09193705
n03773504 n03146219 n03445777 n02128925 n07753592 n02128385 n02111889 n04442312
n03325584 n02797295 n02088094 n02092339 n01729322 n04487081 n03598930 n01667778
n02787622 n07718472 n07754684 n03938244 n02219486 n03791053 n06794110 n01917289
n03958227 n03018349 n02113712 n03980874 n03530642 n02483708 n01644900 n02497673
n04461696 n03733805 n03710721 n04458633 n01984695 n04357314 n01689811 n03803284
n03944341 n12620546 n03680355 n02672831 n02110627 n07716358 n04238763 n03891332
n02132136 n02105251 n03133878 n03825788 n01828970 n01877812 n04355933 n03891251
n04380533 n02113186 n02017213 n02013706 n02108089 n02097130 n02963159 n03857828
n02190166 n03459775 n01774384 n02817516 n07836838 n04347754 n03690938 n01744401
n04008634 n01664065 n01631663 n02104029 n07590611 n02108422 n02094258 n01629819
n07714990 n07920052 n03180011 n03255030 n01531178 n03775546 n01843383 n04141327
n01692333 n03207743 n04398044 n03063689 n02101388 n03709823 n07614500 n02110063
n04127249 n02085620 n04263257 n02129165 n02129604 n09288635 n02102973 n02788148
n03424325 n02490219 n02231487 n02106382 n02229544 n01930112 n03642806 n04067472
n02106166 n04536866 n02098286 n01518878 n01440764 n02444819 n02484975 n02093859
n03868242 n03223299 n02869837 n02346627 n03017168 n02906734 n02105162 n02860847
n01498041 n02793495 n02730930 n02088466 n03337140 n01944390 n04311174 n03782006
n04399382 n02172182 n03447721 n09472597 n09332890 n07716906 n03876231 n03028079
n02777292 n02110958 n01514668 n03047690 n02892201 n01775062 n04370456 n03100240
n03063599 n01753488 n01667114 n04133789 n02133161 n02018795 n07684084 n03595614
n02099849 n02098105 n04004767 n02840245 n04355338 n03109150 n02165105 n02325366
n02138441 n03840681 n02093256 n03065424 n02127052 n04592741 n02105505 n04273569
n02494079 n02790996 n02134418 n10148035 n03160309 n02981792 n04009552 n03977966
n03584254 n04371774 n02102040 n04596742 n02111277 n01669191 n03492542""".split()

assert len(bharath_split['c1base']) == 193
assert len(bharath_split['c2base']) == 196
assert len(bharath_split['c1novel']) == 300
assert len(bharath_split['c2novel']) == 311
assert_disjoint_splits(bharath_split) 

# ImageNet split from "Optimization as a Model for Few-shot Learning"
# https://openreview.net/pdf?id=rJY0-Kcll
sachin_split = {}
with open(os.path.join(os.path.dirname(__file__), 'sachin', 'train.csv')) as f:
    sachin_split['train'] = csv_to_dict(f.read())
with open(os.path.join(os.path.dirname(__file__), 'sachin', 'val.csv')) as f:
    sachin_split['val'] = csv_to_dict(f.read())
with open(os.path.join(os.path.dirname(__file__), 'sachin', 'test.csv')) as f:
    sachin_split['test'] = csv_to_dict(f.read())

assert len(sachin_split['train']) == 64
assert len(sachin_split['val']) == 16
assert len(sachin_split['test']) == 20
assert_disjoint_splits(sachin_split) 

# ImageNet and mini-ImageNet split from "Matching Networks for One-Shot Learning"
# https://arxiv.org/abs/1606.04080
with open(os.path.join(os.path.dirname(__file__), 'oriol', 'mini_imagenet_image_list.txt')) as f:
    lines = f.read().splitlines()
d_train = {}
d_few_shot = {}
for line in lines:
    if line.startswith('data'):
        cls = line.split('/')[-2]
        if len(d_train) < 80:
            d_train[cls] = []
            d = d_train
        else: 
            d_few_shot[cls] = []
            d = d_few_shot
    elif line:
        d[cls] += [line]
oriol_mini_imagenet_split = {}
oriol_mini_imagenet_split['train'] = d_train
oriol_mini_imagenet_split['test'] = d_few_shot

assert len(oriol_mini_imagenet_split['train']) == 80
assert len(oriol_mini_imagenet_split['test']) == 20
for cls in oriol_mini_imagenet_split['train']:
    assert len(oriol_mini_imagenet_split['train'][cls]) == 600
for cls in oriol_mini_imagenet_split['test']:
    assert len(oriol_mini_imagenet_split['test'][cls]) == 600
assert_disjoint_splits(oriol_mini_imagenet_split) 

with open(os.path.join(os.path.dirname(__file__), 'oriol', 'full_imagenet_rand.txt')) as f:
    lines = f.read().splitlines()
    oriol_rand_split = {}
    oriol_rand_split['train'] = [x for x in ilsvrc_synsets if x not in lines]
    oriol_rand_split['test'] = lines

with open(os.path.join(os.path.dirname(__file__), 'oriol', 'full_imagenet_dogs.txt')) as f:
    lines = f.read().splitlines()
    oriol_dogs_split = {}
    oriol_dogs_split['train'] = [x for x in ilsvrc_synsets if x not in lines]
    oriol_dogs_split['test'] = lines

assert len(oriol_rand_split['train']) == 1000 - 118
assert len(oriol_rand_split['test']) == 118
assert_disjoint_splits(oriol_rand_split) 

assert len(oriol_dogs_split['train']) == 1000 - 118
assert len(oriol_dogs_split['test']) == 118
assert_disjoint_splits(oriol_dogs_split) 

#with open(os.path.join(os.path.dirname(__file__), 'wang_basic_level_words.txt')) as f:
#    lines = [x.split()[0] for x in f.read().splitlines()]
#    wang_basic_split = {}
#    for key in lines:
#        wang_basic_split[key] = ['n%08d' % x.offset() for x in ss(key).closure(lambda s: s.hyponyms()) if 'n%08d' % x.offset() in ilsvrc_synsets]
#        #if not wang_basic_split[key]:
#            #assert key in ilsvrc_synsets
#            #wang_basic_split[key] = [key]


with open(os.path.join(os.path.dirname(__file__), 'wang_basic_level_words.txt')) as f:
    wang_basic_words = [x.split()[0] for x in f.read().splitlines()]

"""
# Create the ILSVRC split
def split_labels(nodes, val_prop=0.2):
    split_idx = int(val_prop * len(nodes))
    np.random.shuffle(nodes)
    return nodes[(2*split_idx):], nodes[:split_idx], nodes[split_idx:(2*split_idx)]

np.random.seed(1)
train_nodes, val_nodes, test_nodes = split_labels(ilsvrc_synsets)
dog_synsets = []
"""

with open(os.path.join(os.path.dirname(__file__), 'dog_synsets.txt')) as f:
    dog_synsets = [x[:9] for x in f.read().splitlines()]

with open(os.path.join(os.path.dirname(__file__), 'out.txt')) as f:
    lines = [x[:9] for x in f.read().splitlines()]

    train_nodes, rest = lines[:lines.index('')], lines[lines.index('')+1:]
    val_nodes, test_nodes = rest[:rest.index('')], rest[rest.index('')+1:]

ilsvrc_split_with_dogs = {}
ilsvrc_split_with_dogs['train'] = train_nodes
ilsvrc_split_with_dogs['val']   = val_nodes
ilsvrc_split_with_dogs['test']  = test_nodes

ilsvrc_split = {}
ilsvrc_split['train'] = [x for x in train_nodes if x not in dog_synsets]
ilsvrc_split['val']   = [x for x in val_nodes if x not in dog_synsets]
ilsvrc_split['test']  = [x for x in test_nodes if x not in dog_synsets]


class OriolMiniImageNetSplit(object):
    """TODO"""

    @property
    def train_label_to_image_map(self):
        return oriol_mini_imagenet_split['train']

    @property
    def val_label_to_image_map(self):
        return oriol_mini_imagenet_split['test']

    @property
    def test_label_to_image_map(self):
        return oriol_mini_imagenet_split['test']


class SachinMiniImageNetSplit(object):
    """TODO"""

    @property
    def train_label_to_image_map(self):
        return sachin_split['train']

    @property
    def val_label_to_image_map(self):
        return sachin_split['val']

    @property
    def test_label_to_image_map(self):
        return sachin_split['test']


class ILSVRCSplit(object):
    """TODO"""

    @property
    def train_label_to_image_map(self):
        train_nodes = ilsvrc_split['train']
        return {node: os.listdir(os.path.join(self.source_dir, node)) for node in train_nodes} 

    @property
    def val_label_to_image_map(self):
        val_nodes = ilsvrc_split['val']
        return {node: os.listdir(os.path.join(self.source_dir, node)) for node in val_nodes} 

    @property
    def test_label_to_image_map(self):
        test_nodes = ilsvrc_split['test']
        return {node: os.listdir(os.path.join(self.source_dir, node)) for node in test_nodes} 
